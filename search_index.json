[["index.html", "Data journalism General information on the course What can I learn from this tutorial? What can I do if I have a question? What can I do if I have problems with my R code?", " Data journalism Lara Kobilke, IfKW, Ludwig-Maximilians-Universität München 2022-10-19 General information on the course This online tutorial will accompany the seminar “Data Journalism”, an M.A. Seminar at the IfKW (Ludwig-Maximilians-Universität München, SS2022). The course takes place in Oettingenstraße 67, Room 151 (Wednesday 14:15-15.45 pm). You can access all necessary information on the seminar’s syllabus, important dates and assignments via Moodle, “2023 WiSe Kobilke - Datenjournalismus” (PW: Datenjournalismus22). There, additional resources (e.g. Powerpoint slides, book resources, etc.) are uploaded to the material folders of the respective week. What can I learn from this tutorial? After completing the entire tutorial, you will have acquired two important skills: Know how to use R and RStudio to complete your data management. Know how to use R and RStudio to successfully complete your own data journalistic projects (analysis + visualization). If time allows, know how to use R and RStudio to host your project on a shiny app or an external website (e.g., your own blog). In the first part of this seminar, we will work through this tutorial and solve exercises together. The tutorial is designed to provide the R skills that you need to put data journalistic project into real-world practice. In the second part of the seminar, you will work on your own project (“learning-by-doing”). Each tutorial consists of: an introduction to new functions/analysis methods in R, including corresponding R code main take-aways that you should remember information on additional tutorials / sources exercises to practice your new skills (you’ll often work through these with your peers) What can I do if I have a question? Questions are welcome! It’s natural to have a lot of questions because you’ll be learning a lot of new stuff. Please do ask if you don’t understand something in this tutorial, have questions concerning exercises, or simply need to talk through some of the new stuff. It’s quite natural to get lost at times when learning a new programming language. Don’t worry; it’s extremely probable that everyone else is experiencing the same thing. Therefore, it’s key that you ask questions: In our live sessions: Wednesday, 14:15-15:45. In the Moodle forum: Please, post all your questions to the Moodle forum. Every participant will be able to see your questions, submit replies, and view my responses. As a result, everyone will have access to the same information. To stay updated about current debates, I recommend that you turn on alerts about new entries in the forum. Email: Send me an email at lara.kobilke@ifkw.lmu.de if you have any private questions that you don’t want to address in front of the rest of the class. What can I do if I have problems with my R code? Besides asking a question during the seminar (see What can I do if I have a question?), there are some great places to have a look at when you encounter problems. To give you a head start, here’s a quick rundown of the three best places to look if you have a problem with your code: R’s integrated help function: Use the ?-function whenever possible. Let’s assume you struggle with creating a histogram for your data (hist function in R). You can open the R documentation of the hist function in R by writing: ?hist Preview of ?hist in R: Search engines: Like Bing or Google. Yup, programmers and data scientists google all the time! Nobody knows all the code and errors by heart. Often you can find perfect answers to your questions on Stackoverflow, StatsExchange, or Rseek because other people had exactly the same problems. And more importantly, the communities on these websites are very friendly and helpful. Packages’ reference manuals: Finally, problems with R packages (we’ll get to packages later, see: Packages) can often be solved by looking at their reference manuals (an overview document containing all of a package’s functions). For example, you can learn more about dplyr (a data management package that we are going to use later in this tutorial) by visiting its reference manual on a website called “CRAN”: https://cran.r-project.org/web/packages/dplyr/dplyr.pdf. That is all there is to it. Let’s begin with our first tutorial: Tutorial: Installing &amp; Understanding R/R Studio "],["tutorial-installing-understanding-rr-studio.html", " 1 Tutorial: Installing &amp; Understanding R/R Studio 1.1 Installing R 1.2 Installing R Studio 1.3 Updating R and R Studio 1.4 How does R work? 1.5 Why should I use R? 1.6 How does R Studio work? 1.7 Packages 1.8 Take-Aways 1.9 Additional tutorials", " 1 Tutorial: Installing &amp; Understanding R/R Studio After working through Tutorial 1, you’ll… know how to install R and R Studio know how to update R and R Studio understand the layout of R Studio 1.1 Installing R R is the programming language we’ll use to import, edit, and analyze data. When you are ready to install R, use Cran to install the newest version of R (version 4.2.1, realeased 2022-06-23, called “Funny-Looking Kid”). You’ll have to specify your operation system to download the right version: Installer for Windows Installer for macOS 10.13 (High Sierra) and higher Installer for macOS 11 (Big Sur) and higher Mac Users: Please read the documentation of the installers on this site. You might need to install other dependencies to make R work. 1.2 Installing R Studio Next, install R Studio. R Studio is a desktop application with a graphical interface that facilitates programming with R. The newest version of R Studio (2022.07.2+576) can be downloaded via this Link. 1.3 Updating R and R Studio If you have already installed R and RStudio (for example, because you already needed it for a previous seminar), please update your version to the latest version. This way, we’ll all know that our versions are compatible. 1.3.1 On Windows Updating on Windows is tricky. Therefore, you can use a package called installr, which helps you manage your update. First, install the installr package if you don’t have it. Use the following code to do that: # installing/loading the package: if(!require(installr)) { install.packages(&quot;installr&quot;); require(installr) } #load / install+load installr After you have run the above code, let’s start the updating process of your R installation by using the updateR() function. It will check for newer versions, and if one is available, will guide you through the decisions you’d need to make: # using the package: updateR() Finally, update R Studio. Updating RStudio is easy, just open RStudio and go to Help &gt; Check for Updates to install a newer version. 1.3.2 On MAC Go to CRAN and install the newer package installer. After that update R Studio. Updating RStudio is easy, just open RStudio and go to Help &gt; Check for Updates to install a newer version. 1.4 How does R work? R is an object- and function-oriented programming language. Chambers (2014, p. 4) explains “object- and function-oriented” like this: Everything that exists is an object. Everything that happens is a function call. IN R, you will assign values (for instance, single numbers/letters, several numbers/letters, or whole data files) to objects in R to work with them. For example, this command will assign the letters “hello” to an object caled word by using the assign operator &lt;- (a function used to assign values to objects): word &lt;- &quot;hello&quot; The type of each object will dictate what sorts of computations you may be done with this object. The object word, for example, is distinguished by the fact that it is made up of characters (i.e., it is a word) - which may make it impossible to compute the object’s mean value, for example (which is possible only for objects consisting of numerical data). 1.5 Why should I use R? There are several reasons why I’m an advocate of R (or similar programming languages such as Python) over programs such as SPSS. R is free. Other than most other (statistical) programs, you do not need to buy it (or rely on an university license, that is likely to run out once you leave your department). R is an open source program. Other than most other programs, the source code - i.e., the basis of the program - is freely available. So are the hundred of packages (we’ll get to those later – these are basically additional functions you may need for more specific analyses) on CRAN that you can use to extend R’s base functions. R offers you flexibility. You can work with almost any type of data and rely on a large (!) set of functions to import, edit, or analyze such data. And if the function you need to do so hasn’t been implemented (or simply does not exist yet), you can write it yourself! Learning R increases your chances on the job market. For many jobs (academia, market research, data science, data journalism), applicants should know at least one programming language. 1.6 How does R Studio work? As mentioned before, R Studio is a graphical interface which facilitates programming with R. It contains up to four main windows, which allow for different things: Writing your own code (Window 1: Source). Important: When first installing R/R Studio and opening R Studio, you may not see this window right away. In this case, simply open it by clicking on File/New File/R Script. Executing your own code (Window 2: Console) Inspecting objects (Window 3: Environment) Visualizing data, searching for help, updating packages etc. (Window 4: Files/Plots/Packages etc.) Image: Four main windows in R Please note that the specific set-up of your R Studio may look different (the order of windows may vary and so may the windows’ names). I have made the experience that having these four windows open works best for me. This may be different for you. If you want to modify the appearance of your R Studio, simply choose “Tools/Global Options/Pane Layout”. Image: Changing the Layout 1.6.1 Source: Writing your own code Using the window “Source”, you’ll write your own code to execute whichever task you want R to fulfill. 1.6.1.1 Writing Code Let’s start with an easy example: Assume you simply want R to print the word “hello”. In this case, you would first write a simple command that assigns the word “hello” to an object called word. The assigment of values to named objects is done via either the operator “&lt;-” or the operator “=”. The left side of that command contains the object that should be created; its right side the values that should be assigned to this object. In short, this command tells R to assign the world “hello” to an object called word. word &lt;- &quot;hello&quot; Image: “Source” 1.6.1.2 Annotating Code Another helpful aspect of R is that you can comment your own code. Oftentimes, this is very helpful for understanding your code later (if you write several hundred lines of codes, you may not remember their exact meaning months later). Comments or notes can be made via hashtags #. Anything following a hashtag will not be considered code by R but be ignored instead. word &lt;- &quot;hello&quot; #this line of code assigns the word &quot;hello&quot; to an object called word 1.6.1.3 Executing Code We now want to execute our code. Doing so is simple: Mark the parts of the code you want to run (for instance, single rows of code or blocks of code across several rows) Either press Run (see upper right side of the same window) or press Ctrl + Enter (On Mac OS X, hold the command key and press return instead). R should now execute exactly those lines of codes that you marked (hereby creating the object word). If you haven’t marked any specific code, all lines of code will be executed. Image: Executing Code 1.6.1.4 Saving Code A great feature of R is that it makes analyses easily reproducible - given that you save your code. When reopening R Studio and you script, you can simply “rerun” the code with one click and your analysis will be reproduced. To save code, you have two options: Choose the menu option File/Save as. Important: Code needs to be saved with the ending “.R”. Chose the Save-button in the source window and save your code in the correct format, for instance as “MyCode.R” (some advice: try to avoid numbers or dates as file names because this can break the saving process). Image: Saving code 1.6.2 Console: Printing results Results of executing code are printed in a second window called “Console”, which includes the code you ran and the object you may have called when doing so. Previously, we defined an object called word, which consists of the single word “hello”. Thus, R prints our code as well as objects called when running this code (here, the object word) in the console. word &lt;- &quot;hello&quot; word ## [1] &quot;hello&quot; Image: Window “Console” 1.6.3 Environment: Overview of objects The third window is called “Environment”1. This windows displays all the objects currently existing - in our case, only the object “word”. As soon as you start creating more objects, this environment will fill up. If you’re an SPSS user, this window is very similar to what is called the Datenansicht / Data overview in SPSS. However, the R version of this is much more flexible, given that our environment can contain several data sets, for example, at the same time. Image: Window “Environment” It is important to know that we can visually inspect any object using the View() command (with a new tab then opening in the “Source” window). This isn’t super helpful right now - but if you work with bigger data sets with several observations/variables later on, it is often useful to inspect data visually. View(word) Image: Window “View” 1.6.4 Plots/Help/Packages: Do everything else Lastly, the standard R Studio interface contains a fourth window (if you opted for this layout). In my case, the window contains several sub-sections called “Files”, “Plots”, or “Packages” among others. You’ll understand their specific functions later - the window can, for instance, be used to plot/visualize results or see which packages are currently loaded. Image: Window “Files/Plots/Packages” 1.7 Packages While Base R, i.e., the standard version of R, already includes many helpful functions, you may at times need other, additional functions. For instance, if we want to perform text analysis in R we’ll need to use specific packages including additional functions. Packages are collections of topic-specific functions that extend the functions implemented in Base R. In the spirit of “open science”, anyone can write and publish these additional functions and related packages and anyone can also access the code used to do so. You’ll find a list of all of R packages here. In this seminar, we’ll for instance use packages like dplyr for advanced data management. 1.7.1 Installing packages To use a package, you have to install it first. Let’s say you’re interested in using the package dplyr. Using the command install.packages(), you can install the package on your computer. You’ll have to give the function the name of the package you are interested in installing. install.packages(&quot;dplyr&quot;) Now the package has been installed on your computer and is accessible locally. We only have to use install.packages() for any package once. Afterwards, the only thing you’ll have to do after open R is to activate the already installed package - which we’ll learn next. 1.7.2 Activating packages Before we are able to use a package, we need to activate it in each session. Thus, you should not only define a working directory at the beginning of each session but also activate the packages you want to use via the library()_ command. Again, you’ll have to give R the name of the package you want to activate: library(dplyr) You can also use the name of the package followed by two colons :: to activate a package directly before calling one of its functions. For instance, I do not need use to activate the dplyr package (by using the library() function) to use the function summarize() if I use the following code: dplyr::summarize() 1.7.3 Getting information about packages The package is installed and activated - but how can we use it? To get an overview of functions included in a given package, you can consult its corresponding “reference manual” (overview document containing all of a package’s functions) or, if available, its “vignette” (tutorials on how to use selected functions for the corresponding package) provided by a package’s author on a website called “CRAN”. The easiest way to finding these manuals/vignettes is Google: Simply google CRAN dplyr, for instance, and you’ll be guided to the following website: Image: Cran Overview dplyr package The first paragraph (circled in red) gives you an overview of aspects for which this package may be useful. The second red-circled area links to the reference manual and the vignette. You can, for instance, check out the reference manual to get an idea of the many functions the dplyr package contains. 1.8 Take-Aways Window “Source”: used to write/execute code in R Window “Console”: used to return results of executed code Window “Environment”: used to inspect objects on which to use functions Window “Files/Plots/Packages etc.”: used for additional functions, for instance visualizations/searching for help/activating or updating packages 1.9 Additional tutorials You still have questions? The following tutorials &amp; papers can help you with that: YaRrr! The Pirate’s Guide to R by N.D.Phillips, Tutorial 2 Computational Methods in der politischen Kommunikationsforschung by J. Unkel, Tutorial 1 SICSS Boot Camp by C. Bail, Video 1 wegweisR by M. Haim, Video 1 R Cookbook by Long et al., Tutorial 1 Now that you know the layout of R, we can get started with some real action: Tutorial: Using R as a calculator again, this only applies for the way I set up my R Studio. You can change this via “Tools/Global Options/Pane Layout”↩︎ "],["tutorial-using-r-as-a-calculator.html", " 2 Tutorial: Using R as a calculator 2.1 Using variables for calculation 2.2 Using vectors for calculation 2.3 Selecting values from a vector 2.4 Take-Aways 2.5 Additional tutorials", " 2 Tutorial: Using R as a calculator After working through Tutorial 2, you’ll… be able to work with mathematical operators in R be able to use mathematical operators on variables and vectors subset values from vectors One of the first things everyone learns in R is to use R as a calculator. You have access to many mathematical operators in R (e.g. +, -, *, /, ^). Let’s try some of them. Addition: 5+7 ## [1] 12 Subtraction: 12-7 ## [1] 5 Exponentiation: 3^3 ## [1] 27 2.1 Using variables for calculation You can also assign numbers to variables with the assign operator “&lt;-”. We have already talked about assigning word or numbers to variables in the chapter Writing Code. Please remember that a variable name in R can include numeric and alphabets along with special characters like dot (.) and underline (_).’ Therefore, these are good options to name your variables: my_1st_number &lt;- 3 my.1st.numer &lt;- 3 Do !not! use these variable names because they will cause errors and throw warning messages. I have therefore put the code as annotation to avoid the warning messages (with #): # _number &lt;- 3 # .number &lt;- 3 # my-1st-number &lt;- 3 You can use variables in your calculations by assigning the numbers to variables (i.e. store the numerical value in the variable).’ five &lt;- 5 seven &lt;- 7 twelve &lt;- five + seven # here you add the two variables in which the numbers are stored. The result of the addition is stored in the variable &quot;twelve&quot; twelve # now you have to retrieve the content of the variable, so that the result is printed to the console ## [1] 12 The names of the variables are freely selectable. For example, you can also proceed like this: three &lt;- 5 three # print the content of the variable to the console ## [1] 5 2.2 Using vectors for calculation You can also store more than one number in a variable. We call this process “creating vectors” because variables that contain more than one number are called “vectors” in R (we’ll get to vectors in [Tutorial: Objects &amp; structures in R]). Vectors are created using the combine function c() in R. twelve &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) twelve # print the content of the variable to the console ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 Again, the variable name is chosen arbitrarily. You can also do this: twelve &lt;- c(4,10,15,21,33) twelve # print the content of the variable to the console ## [1] 4 10 15 21 33 You can use mathematical operations on vectors (e.g., +, -, * and /). Let’s create two vectors “weight” and “height” that contain the weight and height measures of 6 individuals. For example, the first individual weighs 60 kg and is 1.75 m tall: weight &lt;- c(60, 72, 57, 90, 95, 72) height &lt;- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91) Now we can calculate the Body Mass Index (BMI) using the BMI formula: BMI &lt;- weight/height^2 BMI # print the content of the BMI variable to the console ## [1] 19.59184 22.22222 20.93664 24.93075 31.37799 19.73630 Now we know that the first person has a BMI of 19.59, which is within the range of normality (18.5 and 24.9). 2.3 Selecting values from a vector We still see the BMI of all the other five people, i.e. the entire vector. How can we select only the first person? You can select values from a vector by using square brackets [ ] and enter the number of the entry that you want to print to your console. BMI[1] ## [1] 19.59184 Again, you can see that the first person has a BMI of 19.59. You could also decide to look at all values except the first one: BMI[-1] ## [1] 22.22222 20.93664 24.93075 31.37799 19.73630 You can even use the [ ] selector on vectors that consist of words instead of numbers. These vectors are called “character vectors”, while vectors that contain numbers are called “numeric vectors”. Let’s create a character vector that contains the BMIs of the six individuals as words. We’ll need to put quotation marks around your entries so that R knows that those values are words not numbers. BMI_word &lt;- c(&quot;nineteen&quot;, &quot;twenty-two&quot;, &quot;twenty&quot;, &quot;twenty-four&quot;, &quot;thirty-one&quot;, &quot;nineteen&quot;) BMI_word ## [1] &quot;nineteen&quot; &quot;twenty-two&quot; &quot;twenty&quot; &quot;twenty-four&quot; &quot;thirty-one&quot; ## [6] &quot;nineteen&quot; We’ll now select only the first value of of this BMI_word character vector: BMI_word[1] ## [1] &quot;nineteen&quot; If you want to select multiple values, you can index them. Let’s select the BMI of the third, fourth and fifth individual: BMI_word[3:5] ## [1] &quot;twenty&quot; &quot;twenty-four&quot; &quot;thirty-one&quot; 2.4 Take-Aways Mathematical operators: use +, -, *, /, ^ Use case: use these operators on numbers, variables, and vectors Create vectors: use the combine function c() Select values from vectors: use square brackets [ ] 2.5 Additional tutorials You still have questions? The following online guides can help you with that: Using R as a Calculator R Vector "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
